import { useState } from 'react'

const socialLinks = [
	{
		href: 'https://github.com/danik3422',
		icon: (
			<svg
				width='24'
				height='24'
				viewBox='0 0 24 24'
				fill='none'
				xmlns='http://www.w3.org/2000/svg'
			>
				<path
					d='M12 2C6.48603 2 2 6.48604 2 12C2 17.514 6.48603 22 12 22C17.514 22 22 17.514 22 12C22 6.48604 17.514 2 12 2ZM12 3.5C16.7033 3.5 20.5 7.2967 20.5 12C20.5 15.8327 17.9785 19.0613 14.5 20.126V17.5684C14.5 16.6133 13.9497 15.7943 13.1543 15.3867C13.9276 15.2388 14.6457 14.9454 15.249 14.5309C15.8522 14.1165 16.3232 13.5929 16.6228 13.0037C16.9224 12.4145 17.0421 11.7765 16.9718 11.1429C16.9015 10.5093 16.6434 9.89818 16.2188 9.36035C16.4405 8.67771 16.6883 7.48034 16.0996 6.53809C14.9647 6.53809 14.2323 7.31604 13.8828 7.7998C13.2853 7.60352 12.6459 7.5017 12 7.5C11.3537 7.50057 10.7136 7.60139 10.1152 7.79688C9.76487 7.31289 9.03311 6.53809 7.90039 6.53809C7.22486 7.61941 7.64246 8.78228 7.86621 9.25684C7.41288 9.79235 7.12862 10.4078 7.03781 11.0505C6.94699 11.6931 7.05233 12.3438 7.34478 12.9468C7.63723 13.5498 8.10809 14.087 8.71698 14.5124C9.32587 14.9379 10.0546 15.2389 10.8408 15.3896C10.1877 15.7262 9.69864 16.337 9.54883 17.0781H8.8916C8.2431 17.0781 7.99112 16.8146 7.64062 16.3701C7.29463 15.9256 6.92259 15.6269 6.47559 15.5029C6.23459 15.4774 6.07223 15.6607 6.28223 15.8232C6.99173 16.3062 7.0407 17.0968 7.3252 17.6143C7.5842 18.0803 8.11484 18.5 8.71484 18.5H9.5V20.126C6.02153 19.0613 3.5 15.8327 3.5 12C3.5 7.2967 7.29669 3.5 12 3.5Z'
					fill='currentColor'
				/>
			</svg>
		),
		alt: 'GitHub',
	},
	{
		href: 'https://www.linkedin.com/in/danylo-syloats/',
		icon: (
			<svg
				width='24'
				height='24'
				viewBox='0 0 24 24'
				fill='none'
				xmlns='http://www.w3.org/2000/svg'
			>
				<path
					d='M5.75 3C4.24011 3 3 4.24011 3 5.75V18.25C3 19.7599 4.24011 21 5.75 21H18.25C19.7599 21 21 19.7599 21 18.25V5.75C21 4.24011 19.7599 3 18.25 3H5.75ZM5.75 4.5H18.25C18.9491 4.5 19.5 5.05089 19.5 5.75V18.25C19.5 18.9491 18.9491 19.5 18.25 19.5H5.75C5.05089 19.5 4.5 18.9491 4.5 18.25V5.75C4.5 5.05089 5.05089 4.5 5.75 4.5ZM7.75 6.5C7.41848 6.5 7.10054 6.6317 6.86612 6.86612C6.6317 7.10054 6.5 7.41848 6.5 7.75C6.5 8.08152 6.6317 8.39946 6.86612 8.63388C7.10054 8.8683 7.41848 9 7.75 9C8.08152 9 8.39946 8.8683 8.63388 8.63388C8.8683 8.39946 9 8.08152 9 7.75C9 7.41848 8.8683 7.10054 8.63388 6.86612C8.39946 6.6317 8.08152 6.5 7.75 6.5ZM7 10C6.7235 10 6.5 10.2235 6.5 10.5V17C6.5 17.2765 6.7235 17.5 7 17.5H8.5C8.7765 17.5 9 17.2765 9 17V10.5C9 10.2235 8.7765 10 8.5 10H7ZM10.5 10C10.2235 10 10 10.2235 10 10.5V17C10 17.2765 10.2235 17.5 10.5 17.5H12C12.2765 17.5 12.5 17.2765 12.5 17V13.25C12.5 12.5605 13.0605 12 13.75 12C14.4395 12 15 12.5605 15 13.25V17C15 17.2765 15.2235 17.5 15.5 17.5H17C17.2765 17.5 17.5 17.2765 17.5 17V13C17.5 11.3455 16.1545 10 14.5 10C13.731 10 13.0315 10.293 12.5 10.7705V10.5C12.5 10.2235 12.2765 10 12 10H10.5Z'
					fill='currentColor'
				/>
			</svg>
		),
		alt: 'LinkedIn',
	},
	{
		href: 'https://www.codewars.com/users/danik3422',
		icon: (
			<svg
				xmlns='http://www.w3.org/2000/svg'
				x='0px'
				y='0px'
				width='24'
				height='24'
				viewBox='0 0 48 48'
			>
				<path
					d='M 10.5 6 C 8.0324991 6 6 8.0324991 6 10.5 L 6 37.5 C 6 39.967501 8.0324991 42 10.5 42 L 37.5 42 C 39.967501 42 42 39.967501 42 37.5 L 42 10.5 C 42 8.0324991 39.967501 6 37.5 6 L 10.5 6 z M 10.5 9 L 37.5 9 C 38.346499 9 39 9.6535009 39 10.5 L 39 37.5 C 39 38.346499 38.346499 39 37.5 39 L 10.5 39 C 9.6535009 39 9 38.346499 9 37.5 L 9 10.5 C 9 9.6535009 9.6535009 9 10.5 9 z M 24.001953 10.958984 C 21.502953 10.785984 18.879469 12.154109 17.605469 14.412109 C 17.568722 14.472805 17.544352 14.539658 17.509766 14.601562 C 15.657868 14.743433 13.788119 15.789259 12.705078 17.478516 C 11.306078 19.556516 11.180047 22.512141 12.498047 24.744141 C 12.532318 24.806358 12.578834 24.86092 12.615234 24.921875 C 11.812172 26.596684 11.783441 28.736954 12.705078 30.519531 C 13.805078 32.770531 16.300578 34.357031 18.892578 34.332031 C 18.963134 34.333452 19.032985 34.321334 19.103516 34.320312 C 20.152112 35.853599 21.993057 36.947556 23.998047 37.041016 C 26.497047 37.214016 29.120531 35.845891 30.394531 33.587891 C 30.431278 33.527195 30.455648 33.460342 30.490234 33.398438 C 32.342132 33.256567 34.211881 32.210741 35.294922 30.521484 C 36.693922 28.443484 36.819953 25.487859 35.501953 23.255859 C 35.467682 23.193642 35.421166 23.13908 35.384766 23.078125 C 36.187828 21.403316 36.216559 19.263046 35.294922 17.480469 C 34.194922 15.229469 31.699422 13.642969 29.107422 13.667969 C 29.036866 13.666548 28.967015 13.678666 28.896484 13.679688 C 27.847888 12.146401 26.006943 11.052444 24.001953 10.958984 z M 24.613281 13.445312 C 25.373784 13.467569 26.146713 13.669263 26.873047 14.033203 C 26.36841 14.201232 25.878189 14.411869 25.425781 14.679688 C 24.348781 15.364688 23.423094 16.318125 22.871094 17.453125 C 22.053017 18.999532 21.985408 20.830044 22.513672 22.380859 A 2.2 2.2 0 0 0 22.185547 22.757812 C 21.208437 22.168214 20.461167 21.345309 20.029297 20.396484 C 19.341297 18.944484 19.438406 17.239156 20.191406 15.910156 C 20.935406 14.550156 22.379 13.629844 24 13.464844 C 24.203 13.445344 24.407193 13.439281 24.613281 13.445312 z M 16.804688 16.529297 C 16.69801 17.050244 16.634857 17.579749 16.640625 18.105469 C 16.695625 19.380469 17.061578 20.659078 17.767578 21.705078 C 18.697225 23.186164 20.246883 24.15836 21.853516 24.476562 A 2.2 2.2 0 0 0 22.017578 24.949219 C 21.018159 25.501089 19.930911 25.735374 18.892578 25.634766 C 17.291578 25.504766 15.863844 24.567953 15.089844 23.251953 C 14.283844 21.927953 14.207 20.219422 14.875 18.732422 C 15.271894 17.861834 15.942437 17.097414 16.804688 16.529297 z M 29.105469 16.658203 C 30.654469 16.622203 32.173953 17.410422 33.126953 18.732422 C 33.682179 19.511614 34.00751 20.475205 34.068359 21.505859 C 33.67037 21.152679 33.243576 20.832286 32.785156 20.574219 C 31.653156 19.984219 30.362516 19.659047 29.103516 19.748047 C 27.35561 19.812938 25.739023 20.671489 24.660156 21.904297 A 2.2 2.2 0 0 0 24.171875 21.810547 C 24.193565 20.668779 24.532331 19.610597 25.138672 18.761719 C 26.051672 17.439719 27.578469 16.670203 29.105469 16.658203 z M 28.498047 22.34375 C 28.701986 22.338471 28.906172 22.345734 29.107422 22.365234 C 30.708422 22.495234 32.136156 23.432047 32.910156 24.748047 C 33.716156 26.072047 33.793 27.780578 33.125 29.267578 C 32.728106 30.138166 32.057563 30.902586 31.195312 31.470703 C 31.30199 30.949756 31.365143 30.420251 31.359375 29.894531 C 31.304375 28.619531 30.938422 27.340922 30.232422 26.294922 C 29.302775 24.813836 27.753117 23.84164 26.146484 23.523438 A 2.2 2.2 0 0 0 25.982422 23.050781 C 26.788134 22.605875 27.649777 22.365709 28.498047 22.34375 z M 25.814453 25.242188 C 26.791563 25.831786 27.538833 26.654691 27.970703 27.603516 C 28.658703 29.055516 28.561594 30.760844 27.808594 32.089844 C 27.064594 33.449844 25.621 34.370156 24 34.535156 C 23.047892 34.626615 22.050116 34.429361 21.126953 33.966797 C 21.63159 33.798768 22.121811 33.588131 22.574219 33.320312 C 23.651219 32.635312 24.576906 31.681875 25.128906 30.546875 C 25.946983 29.000468 26.014592 27.169956 25.486328 25.619141 A 2.2 2.2 0 0 0 25.814453 25.242188 z M 23.339844 26.095703 A 2.2 2.2 0 0 0 23.828125 26.189453 C 23.806435 27.331221 23.467669 28.389403 22.861328 29.238281 C 21.948328 30.560281 20.421531 31.329797 18.894531 31.341797 C 17.345531 31.377797 15.826047 30.589578 14.873047 29.267578 C 14.317821 28.488386 13.99249 27.524795 13.931641 26.494141 C 14.32963 26.847321 14.756424 27.167714 15.214844 27.425781 C 16.346844 28.015781 17.637484 28.340953 18.896484 28.251953 C 20.64439 28.187062 22.260977 27.328511 23.339844 26.095703 z'
					fill='currentColor'
				></path>
			</svg>
		),
		alt: 'Codewars',
	},
]

const Contact = () => {
	const [data, setData] = useState({
		name: '',
		email: '',
		message: '',
	})

	const [status, setStatus] = useState(null)
	const [loading, setLoading] = useState(false)

	const handleChange = (e) => {
		const { name, value } = e.target
		setData((prev) => ({
			...prev,
			[name]: value,
		}))
	}

	const handleSubmit = async (e) => {
		e.preventDefault()
		setLoading(true)
		setStatus(null)

		try {
			const response = await fetch(
				'https://contact-telegram.vercel.app/api/contact',
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(data),
				}
			)

			if (response.ok) {
				setStatus('success')
				setData({ name: '', email: '', message: '' })
			} else {
				setStatus('error')
			}
		} catch (error) {
			console.error('Error submitting form:', error)
			setStatus('error')
		} finally {
			setLoading(false)
		}
	}

	return (
		<section id='contact' className='section'>
			<div className='container lg:grid lg:grid-cols-2 lg:items-stretch'>
				<div className='mb-12 lg:mb-0 lg:flex lg:flex-col'>
					<h2 className='headline-2 lg:max-w-[12ch] reveal-up'>
						Looking to team up?
					</h2>
					<p className='text-zinc-400 mt-3 mb-8 max-w-[50ch] lg:max-w-[30ch] reveal-up'>
						Shoot me a message and let’s chat about your project — happy to see
						how I can help!
					</p>

					<div className='flex items-center gap-2 mt-auto'>
						{socialLinks.map(({ href, icon }, key) => (
							<a
								key={key}
								href={href}
								target='_blank'
								rel='noopener noreferrer'
								className='w-12 h-12 grid place-items-center ring-inset ring-2 ring-zinc-50/5 rounded-lg transition-[background-color,color] hover:bg-zinc-50 hover:text-zinc-950 active:bg-zinc-50/80 reveal-up'
							>
								{icon}
							</a>
						))}
					</div>
				</div>

				<form onSubmit={handleSubmit} className='xl:pl-10 2xl:pl-20'>
					<div className='md:grid md:items-center md:grid-cols-2 md:gap-2'>
						<div className='mb-4'>
							<label htmlFor='name' className='label reveal-up'>
								Name
							</label>
							<input
								type='text'
								id='name'
								name='name'
								required
								autoComplete='name'
								placeholder='Name'
								value={data.name}
								onChange={handleChange}
								className='text-field reveal-up'
							/>
						</div>

						<div className='mb-4'>
							<label htmlFor='email' className='label reveal-up'>
								Email
							</label>
							<input
								type='email'
								id='email'
								name='email'
								required
								autoComplete='email'
								placeholder='email@example.com'
								value={data.email}
								onChange={handleChange}
								className='text-field reveal-up'
							/>
						</div>
					</div>

					<div className='mb-4'>
						<label htmlFor='message' className='label reveal-up'>
							Message
						</label>
						<textarea
							id='message'
							name='message'
							required
							placeholder='Message'
							value={data.message}
							onChange={handleChange}
							className='text-field resize-y min-h-32 max-h-80 reveal-up'
						></textarea>
					</div>

					<button
						type='submit'
						disabled={loading}
						className='btn btn-primary [&]:max-w-full w-full justify-center reveal-up'
					>
						{loading ? 'Sending...' : 'Submit'}
					</button>

					{status === 'success' && (
						<p className='text-green-500 mt-2'>Message sent successfully!</p>
					)}
					{status === 'error' && (
						<p className='text-red-500 mt-2'>
							Something went wrong. Please try again.
						</p>
					)}
				</form>
			</div>
		</section>
	)
}

export default Contact
